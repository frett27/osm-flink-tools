/*
 */

version = "0.2-SNAPSHOT"

buildscript {
	repositories { jcenter() }
	dependencies { classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.2' 
	}
}

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'eclipse'


apply plugin: 'com.github.johnrengelman.shadow'
// apply plugin: 'eu.appsatori.fatjar'

import com.github.jengelman.gradle.plugins.shadow.tasks.*


eclipse {
	classpath { downloadSources=true }
}

repositories {
	maven { url "http://repository.apache.org" }
	jcenter()
	mavenLocal()
}

def flinkversion = "1.3.1"

dependencies {
	compile 'org.slf4j:slf4j-api:1.7.5'
	compile files('externallibs/osmpbf-1.3.3.jar')
	compile 'com.esri.geometry:esri-geometry-api:1.2.1'

	compile "org.apache.flink:flink-java:${flinkversion}"
	compile "org.apache.flink:flink-clients_2.10:${flinkversion}"
	compile "org.apache.flink:flink-avro_2.10:${flinkversion}"

	compile "net.frett27:osm-gis-avro:0.1"

	testCompile "junit:junit:4.11"
}

jar {
	manifest { attributes 'Main-Class': 'org.frett27.spatialflink.inputs.process.ProcessOSM' }
}

// shadow jar, for use inside a flink cluster (does not include the flink stack)
shadowJar {
	dependencies {
		include(dependency('com.esri.geometry:esri-geometry-api'))
		include(dependency(files('externallibs/osmpbf-1.3.3.jar')))
		include(dependency('net.frett27:osm-gis-avro'))
	}
}

// this task generate a jar bundle that include all the flink stack,
// and permit to use the soft from a command line
task allJars(type: ShadowJar) {
	from sourceSets.main.output
	configurations = [project.configurations.compile]
	transform(com.github.jengelman.gradle.plugins.shadow.transformers.AppendingTransformer) { resource = 'reference.conf' }

	manifest {
		attributes 'Implementation-Title': 'osm-flink-tools', 'Implementation-Version': version
		attributes 'Main-Class': 'org.frett27.spatialflink.inputs.process.ProcessOSM'
	}
}



